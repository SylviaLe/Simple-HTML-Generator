import re
from random import randrange
import datetime

def wrap(tag, word):
    #put HTML tag around the text
    temp = '<{0}>{1}</{2}>'.format(tag, word, tag)

    pattern = re.compile(r'</.+?>')
    endtag = pattern.findall(temp)[0]
    openpart = temp[:temp.find(endtag)]
    result = ''
    if ('id' in endtag):
        substr = endtag[endtag.find('id'):-1]
        new_endtag = endtag.replace(substr, '')
        result = openpart + new_endtag
        return result
    
    elif ('class' in pattern.findall(temp)[0]):
        substr = temp[temp.find('class'):-1]
        new_endtag = endtag.replace(substr, '')
        result = openpart + new_endtag
        return result
    
    else:
        return temp


def table_gen(row, col):
    #generate a blank HTML table

    table = ''
    k = 0
    for i in range(row):
        table_row = ''
        for j in range(col):
            table_row += '<td>{' + str(k) + '}</td>' #The {} is for inserting value later, using format()
            k += 1
        table_row = wrap('tr', table_row)
        table += table_row

    result = wrap('table', table)
    
    return result

def letter_table(row, col):
    #insert the random letter, generated by the function below,
    #into the blank table, using format() function
    letters = random_let(row, col)
    table = table_gen(row, col)
    result = table.format(*letters)

    return result

def pic_table(row, col, img_list):
    #insert images into the blank table
    #including code to generate a list of html <img> tag
    imgs_tag = []
    for i in range(len(img_list)):
        tag = "<img src='" + img_list[i] + ">" #since img is a self-closing tag, we don't need to use wrap here
        imgs_tag.append(tag)
    
    imgs_tup = tuple(imgs_tag)
    table = table_gen(row, col)
    result = table.format(*imgs_tup)

    return result

def random_let(row, col):
    #generate random letter for the random letter table
    #return a tuple of random letter
    
    n = row*col + 2 #+2 because redundant is better than not enough
    letter_list = []
    for i in range(n):
        index = randrange(65, 123)
        while index in range(91, 97):
            index = randrange(65, 123) #because the character from 91 to 97 is not a letter, so if index in that range, redo 
        letter_list.append(chr(index))
    
    result = tuple(letter_list)
    return result


def main():
    #Since there are things in the HTML code that stays the same,
    #like the table and the heading, I'm thinking of using the format() function
    #to insert customizable things (in the config.txt file) into the html string


    #so my idea of the program is this: read the file for info.
    #Info about color will be put inside the <style> tag, put in a separate chunk
    #The table data, title and the author will be inside body, put them in another chunk
    #The images will be put in a string then passed as parameters to pic_table().
    #We will extract the dimension info and pass it to table_gen()
    #After having all the chunks ready we concatenate them and write to the file

    #THE FIRST HTML CHUNK, CONTAINING CSS AND THE TABLE TITLE
    css_str = '''
    <!DOCTYPE html>
    <html>
    <head>
    <style type="text/css">
        body {
            background-color: {0};
            }
        h1{
            text-align: center; 
            font-size: 36px;
            font-weight: 600;
            }
        table{
            border: {1}px solid {2};
            text-align:center;
            border-collapse:collapse; 
            margin-left: auto; 
            margin-right: auto; 
            width: 80%
            }
        tr td {
            border: {1}px solid {2};
            background-color: {3}; 
            vertical-align: middle;
            padding: 30px;
            }
        tr:nth-child(even) td:nth-child(odd), tr:nth-child(odd) td:nth-child(even){
            background-color: {4};
            }
        p {
            text-align: center; 
            font-size: 21px;
            font-weight: 600;
            }
    </style>    
    </head>
    <body>
    <h1>Tables</h1>
    '''
    #THE SECOND HTML CHUNK, THE TABLE BEGINS
    table_str = ''''''
    #THE THIRD HTML CHUNK, THE AUTHORS AND END TAGS
    authors_str = '''
    <p>Created automatically for COM214 HW1 on {0}</p>
    <p>Authors: {1}</p>

    </body>
    </html>
    '''

    #this code is my test for reading the file
    with open('config.txt', 'r') as f:
        bodybg = f.readline()
        bodybg = bodybg[bodybg.find('\t'):].strip()
        #print(bodybg)

        cell1 = f.readline()
        cell1 = cell1[cell1.find('\t'):].strip()
        #print(cell1)

        cell2 = f.readline()
        cell2 = cell2[cell2.find('\t'):].strip()
        #print(cell2)

        bordercolor = f.readline()
        bordercolor = bordercolor[bordercolor.find('\t'):].strip()
        #print(bordercolor)

        borderpx = f.readline()
        borderpx = borderpx[borderpx.find('\t'):].strip()
        #print(borderpx)

        authors = f.readline()
        authors = authors[authors.find('\t'):].strip()
        #print(authors)

        title = f.readline()
        title = title[title.find('\t'):].strip()
        #print(title)

        mode = f.readline().lower().strip()
        #print(mode)

        date = datetime.datetime.now()
        date_str = '' #since the footnote require info about time created

        rows, cols = 0, 0
        if mode == 'images':
            imgsList = f.readlines()
            #get the table dimension
            row = len(imgsList)
            col = imgsList[0].count('\t') + 1
            
            #create a list of image link
            imgsStr = str(imgsList)
            imgs = imgsStr.replace("['", '').replace("']",'').replace('\\n', '\\t').replace("', '", '').split('\\t')
            table_str = pic_table(row, col, imgs)
            
        elif mode == 'letters':
            #get the table dimension
            dimension = f.readline().split('x')
            row, col = int(dimension[0]), int(dimension[1])
            table_str = letter_table(row, col)
            


